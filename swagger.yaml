openapi: 3.0.0
info:
  title: "ProxyPay API"
  description: |
    API responsible for abstract payment gateways with simple endpoints

    ## Transaction creation status codes

    | status | success? | desc |
    |:-------|:----|:--------|
    | `Success` | yes | Sucesso |
    | `GenericError` | no | Genérica |
    | `InsufficientFunds` | no | Saldo/limite insuficiente |
    | `InvalidPassword` | no | Senha inválida |
    | `NotAllowed` | no | Transação não permitida para o cartão |
    | `InvalidCardNumber` | no | Número cartão não pertence ao emissor | número cartão inválido |
    | `SecurityViolation` | no | Violação de segurança |
    | `SuspectedFraud` | no | Suspeita de fraude |
    | `InvalidMerchant` | no | Comerciante inválido |
    | `RetryRequired` | no | Refazer a transação (emissor solicita retentativa) |
    | `ConsultAccreditation` | no | Consultar credenciador |
    | `AcquirerProblem` | no | Problema no adquirente |
    | `CardError` | no | Erro no cartão |
    | `FormatError` | no | Erro de formato (mensageria) |
    | `InvalidTransactionValue` | no | Valor da transação inválida |
    | `InvalidInstallmentValue` | no | Valor da parcela inválida |
    | `PasswordAttemptsExceeded` | no | Excedidas tentativas de senha | compras |
    | `LostCard` | no | Cartão perdido |
    | `StolenCard` | no | Cartão roubado |
    | `ExpiredCard` | no | Cartão vencido / dt expiração inválida |
    | `TransactionNotAllowed` | no | Transação não permitida | capacidade do terminal |
    | `ValueExceeded` | no | Valor excesso | saque |
    | `InternationalTransactionWithLocalCard` | no | Cartão doméstico - transação internacional |
    | `InvalidMinValue` | no | Valor mínimo da transação inválido |
    | `ExceededWithdrawQuantity` | no | Quant. de saques excedido |
    | `ExpiredPassword` | no | Senha vencida / erro de criptografia de senha |
    | `PasswordAttemptsExceededWithdraw` | no | Excedidas tentativas de senha | saque |
    | `InvalidDestinationAccount` | no | Conta destino inválida ou inexistente |
    | `InvalidOriginAccount` | no | Conta origem inválida ou inexistente |
    | `CardStillBlocked` | no | Cartão novo sem desbloqueio |
    | `InvalidCard` | no | Cartão inválido (criptograma) |
    | `IssuerOutOfService` | no | Emissor fora do ar |
    | `SystemFailure` | no | Falha do sistema |
    | `DiffPreAuthorization` | no | Diferença - pré autorização |
    | `InvalidFunctionDebit` | no | Função incorreta (débito) |
    | `InvalidFunctionCredit` | no | Função incorreta (crédito) |
    | `ChangePassword` | no | Troca de senha / desbloqueio |
    | `NewPasswordNotAccepted` | no | Nova senha não aceita |
    | `CollectCard` | no | Recolher cartão (não há fraude) |
    | `DynamicKeyChangeError` | no | Erro por mudança de chave dinâmica |
    | `FraudConfirmed` | no | Fraude confirmada |
    | `EmitterNotFound` | no | Emissor ñ localizado - bin incorreto |
    | `NotAllowedByMoneyLaundryLaw` | no | (negativa do adquirente) não cumprimento pelas leis de ante lavagem de dinheiro |
    | `InvalidRollback` | no | Reversão inválida |
    | `NotFoundByRouter` | no | Não localizado pelo roteador |
    | `DeniedByInfractionLaw` | no | Transação negada por infração de lei |
    | `DuplicateTracingData` | no | Valor do tracing data duplicado |
    | `UnsupportedSurchage` | no | Surcharge não suportado |
    | `UnsupportedSurchageDebitNetwork` | no | Surcharge não suportado pela rede de débito |
    | `StripForce` | no | Forçar stip |
    | `WithdrawNotAvailable` | no | Saque não disponível |
    | `ServiceRecurrencySuspension` | no | Suspensão de pagamento recorrente para um serviço |
    | `AllServiceRecurrencySuspension` | no | Suspensão de pagamento recorrente para todos serviço |
    | `TransactionLotQualifiedVisaPin` | no | Transação não qualificada para visa pin |
    | `AllAuthorizationOrderSuspended` | no | Suspensão de todas as ordens de autorização |
    | `RegisterNotFoundInFile` | no | Não é possível localizar o registro no arquivo |
    | `FileNotAvailableForUpdate` | no | Arquivo não disponível para atualização |
    | `RejectedCancel` | no | Cancelamento não efetuado. transação não localizada. |
    | `ApprovedTransactionCancel` | no | Transação de cancelamento autorizada com sucesso. atençâo: esse retorno é para casos de cancelamentos e não para casos de autorizações. |


    ## Transaction status


    | Status | Description |
    | :------- | :--------- |
    | `NotFinished` | Aguardando atualização de status |
    | `Authorized` | Pagamento apto a ser capturado ou definido como pago |
    | `PaymentConfirmed` | Pagamento confirmado e finalizado |
    | `Denied` | Pagamento negado por Autorizador |
    | `Voided` | Pagamento cancelado |
    | `Refunded` | Pagamento cancelado após 23:59 do dia de autorização |
    | `Pending` | Aguardando Status de instituição financeira |
    | `Aborted` | Pagamento cancelado por falha no processamento ou por ação do AF |
    | `Scheduled` | Recorrência agendada |

  version: "1.0.0"
  x-logo:
    url: "/imgs/logo.webp"
    backgroundColor: "#FFFFFF"
    altText: "ProxyPay API Docs"

servers:
  - url: https://api-sandbox.proxypay.com.br/v1
    description: Sandbox server v1 (uses test data)

paths:
  /transaction:
    post:
      summary: "Create transaction"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionCreation"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCreationResult"
        400:
          description: "Validation error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
  /transaction/{gatewayCode}/{transactionId}:
    get:
      summary: "Get transaction"
      parameters:
        - in: path
          name: "gatewayCode"
          schema:
            type: "string"
          required: true
          description: "Gateway code where transaction was created"
          example: "cielo"
        - in: path
          name: "transactionId"
          schema:
            type: "string"
          required: true
          description: "Transaction id created by gateway"
          example: "13adc203-bb0a-4f5f-932e-3e6350e18504"
      responses:
        200:
          description: "Transaction"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        404:
          description: "Transaction not found"
    put:
      summary: "Capture authorized transaction"
      parameters:
        - in: path
          name: "gatewayCode"
          schema:
            type: "string"
          required: true
          description: "Gateway code where transaction was created"
          example: "cielo"
        - in: path
          name: "transactionId"
          schema:
            type: "string"
          required: true
          description: "Transaction id created by gateway"
          example: "13adc203-bb0a-4f5f-932e-3e6350e18504"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionCapture"
      responses:
        200:
          description: "Success capture"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionCaptureResult"
        404:
          description: "Transaction not found"
  /transaction/{gatewayCode}/{transactionId}/refunds:
    post:
      summary: "Refund captured transaction"
      parameters:
        - in: path
          name: "gatewayCode"
          schema:
            type: "string"
          required: true
          description: "Gateway code where transaction was created"
          example: "cielo"
        - in: path
          name: "transactionId"
          schema:
            type: "string"
          required: true
          description: "Transaction id created by gateway"
          example: "13adc203-bb0a-4f5f-932e-3e6350e18504"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionRefund"
      responses:
        200:
          description: "Success refund"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionRefundResult"
        404:
          description: "Transaction not found"

security:
  - clientIdAndSecretBasic: []

components:
  securitySchemes:
    clientIdAndSecretBasic:
      type: http
      scheme: basic

  schemas:
    TransactionCreation:
      type: "object"
      required:
      - "reference"
      - "amount"
      - "cardNumber"
      - "expirationMonth"
      - "expirationYear"
      properties:
        capture:
          type: "boolean"
          description: "Flag to capture amount (`true`) or just Authorize (`false`): **Default:** `false`"
          example: true
        reference:
          type: "string"
          description: "Used to identify transaction (line store order number). **Length <= 16**"
          example: "my-unique-order-number-1234"
        amount:
          type: "integer"
          description: "Amount in cents, with no separation. E.g.: R$ 0,50 => `50` or R$ 1000,50 => `100050`). Value >= 1"
          example: 100050
        installments:
          type: "integer"
          description: "Installments number. **Value >= 1 and <= 255**. Default: `1`"
          example: 12
        cardNumber:
          type: "string"
          description: "Card number, only numbers. E.g.: for a card number *5555.5555.5555.4444* you should use `5555555555554444`"
          example: "5555555555554444"
        expirationMonth:
          type: "integer"
          description: "Card expiration month, only numbers. Value between `1` and `12`"
          example: 11
        expirationYear:
          type: "integer"
          description: "Card expiration year, only numbers. Format *9999*, E.g: `2028`"
          example: 2028
        cardHolderName:
          type: "string"
          description: "Card holder name, E.g.: `JOHN DOE`"
          example: "JOHN DOE"
        securityCode:
          type: "string"
          description: "Security code, format *999*, E.g.: `123`"
          example: "123"
    TransactionCreationResult:
      type: "object"
      properties:
        success:
          type: "boolean"
          description: "Transaction made with success (`true`) or not (`false`)"
          example: true
        status:
          type: "string"
          description: "Transaction creation status. Check full list [here](#section/Transaction-creation-status-codes)"
          enum:
            - Success
            - GenericError
            - InsufficientFunds
            - InvalidPassword
          example: Success
        gatewayCode:
          type: "string"
          description: "Gateway code used in this transaction"
          example: "cielo"
        gatewayReturnCode:
          type: "string"
          description: "Raw code returned by gateway"
          example: "00"
        gatewayReturnMessage:
          type: "string"
          description: "Raw messsage returned by gateway"
          example: "Operation Successful"
        cardBrand:
          type: "string"
          description: "Card brand returned by gateway"
          example: "visa"
        reference:
          type: "string"
          description: "Used to identify transaction (line store order number)"
          example: "my-unique-order-number-1234"
        transactionId:
          type: "string"
          description: "Transaction identification"
          example: "13adc203-bb0a-4f5f-932e-3e6350e18504"
        authCode:
          type: "string"
          description: "Authorization code returned by card issuer"
          example: "760946"
        links:
          type: "array"
          items:
            $ref: "#/components/schemas/Link"
    Transaction:
      type: "object"
      properties:
        id:
          type: "string"
          description: "Transaction identification. As example here it's an uuid, but it's generated by gateway, so consider any string"
          example: "13adc203-bb0a-4f5f-932e-3e6350e18504"
        success:
          type: "boolean"
          description: "Transaction made with success (`true`) or not (`false`)"
          example: true
        status:
          type: "string"
          description: "Transaction status. Check descriptions [here](#section/Transaction-status)"
          enum:
            - "NotFinished"
            - "Authorized"
            - "PaymentConfirmed"
            - "Denied"
            - "Voided"
            - "Refunded"
            - "Pending"
            - "Aborted"
            - "Scheduled"
          example: "Authorized"
        reference:
          type: "string"
          description: "Used to identify transaction (line store order number)"
          example: "my-unique-order-number-1234"
        amount:
          type: "integer"
          description: "Amount in cents, with no separation. E.g.: R$ 0,50 => `50` or R$ 1000,50 => `100050`)."
          example: 100050
        installments:
          type: "integer"
          description: "Installments number"
          example: 12
        currency:
          type: "string"
          description: "Currency code"
          example: "BRL"
        cardBin:
          type: "string"
          description: "Card bin. First 6 digits"
          example: "555555"
        cardLastDigits:
          type: "string"
          description: "Card last digigs. Last 4 digits"
          example: "4444"
        expirationMonth:
          type: "integer"
          description: "Card expiration month, only numbers."
          example: 11
        expirationYear:
          type: "integer"
          description: "Card expiration year, only numbers. Format *9999*"
          example: 2028
        cardHolderName:
          type: "string"
          description: "Card holder name, E.g.: `JOHN DOE`"
          example: "JOHN DOE"
        softDescriptor:
          type: "string"
          description: "Used to identify transaction (line store order number). **Length <= 13**"
          example: "MAGAZINE Y"
        authCode:
          type: "string"
          description: "Authorization code returned by card issuer"
          example: "760946"
        capture:
          $ref: "#/components/schemas/Refund"
        refund:
          $ref: "#/components/schemas/Refund"
        links:
          type: "array"
          items:
            $ref: "#/components/schemas/Link"
    Capture:
      type: "object"
      description: "If transaction was captured, these values will be filled"
      properties:
        dateTime:
          type: "string"
          description: "Capture datetime, ISO datetime"
          example: "2021-04-17T15:51:18-03:00"
        amount:
          type: "int"
          description: "Capture amount in cents, with no separation. E.g.: R$ 0,50 => `50` or R$ 1000,50 => `100050`)"
          example: 2000
    Refund:
      type: "object"
      description: "If transaction was voided/refunded, these values will be filled"
      properties:
        dateTime:
          type: "string"
          description: "Refund datetime, ISO datetime"
          example: "2021-04-18T15:51:18-03:00"
        amount:
          type: "int"
          description: "Refund amount in cents, with no separation. E.g.: R$ 0,50 => `50` or R$ 1000,50 => `100050`)"
          example: 2000
    Link:
      type: "object"
      properties:
        method:
          type: "string"
          description: "HTTP Method used for this link"
          example: "PUT"
        rel:
          type: "string"
          description: "Link relationship with transaction"
          example: "capture"
        url:
          type: "string"
          description: "Link path to be used"
          example: "/v1/transaction/cielo/13adc203-bb0a-4f5f-932e-3e6350e18504"
    TransactionCapture:
      type: "object"
      description: "Capture a transaction"
      properties:
        amount:
          type: "int"
          description: "Capture amount in cents, with no separation. E.g.: R$ 0,50 => `50` or R$ 1000,50 => `100050`)"
          example: 2000
    TransactionCaptureResult:
      type: "object"
      properties:
        success:
          type: "boolean"
          description: "Transaction captured with success (`true`) or not (`false`)"
          example: true
        gatewayCode:
          type: "string"
          description: "Gateway code used in this transaction"
          example: "cielo"
        gatewayReturnCode:
          type: "string"
          description: "Raw code returned by gateway"
          example: "00"
        gatewayReturnMessage:
          type: "string"
          description: "Raw messsage returned by gateway"
          example: "Operation Successful"
        authCode:
          type: "string"
          description: "Authorization code returned by card issuer"
          example: "760946"
        links:
          type: "array"
          items:
            $ref: "#/components/schemas/Link"
    TransactionRefund:
      type: "object"
      description: "Refund a transaction"
      properties:
        amount:
          type: "int"
          description: "Refund amount in cents, with no separation. E.g.: R$ 0,50 => `50` or R$ 1000,50 => `100050`)"
          example: 2000
    TransactionRefundResult:
      type: "object"
      properties:
        success:
          type: "boolean"
          description: "Transaction voided with success (`true`) or not (`false`)"
          example: true
        gatewayCode:
          type: "string"
          description: "Gateway code used in this transaction"
          example: "cielo"
        gatewayReturnCode:
          type: "string"
          description: "Raw code returned by gateway"
          example: "00"
        gatewayReturnMessage:
          type: "string"
          description: "Raw messsage returned by gateway"
          example: "Operation Successful"
        links:
          type: "array"
          items:
            $ref: "#/components/schemas/Link"
    ValidationError:
      type: "object"
      properties:
        "[field name]":
          type: "string"
          description: "Error message"
          example: "must be no less than 1"
